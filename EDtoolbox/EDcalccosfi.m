function [Distances,Cosfi] = EDcalccosfi(coordsou,coordpatch,nvecpatch,dipolevec)% EDcalccosfi gives both a distance matrix and a cosfi matrix, both of size% [npatches,nsources].%% Peter Svensson (peter.svensson@ntnu.no) 18 Jan 2018%% [Distances,Cosfi] = GEOcalccosfi(coordsou,coordpatch,nvecpatch,dipolevec);% 970901 Functioning version% 971002 Included the input parameter dipolevec, giving the possibility%        to use dipole sources.% 971110 Took care of the distance = 0 possibility.% 971111 Speeded up calculations.% 040606 Updated to Matlab 6.5% 13 Dec. 2017 Copied from RADtoolbox to GEOtoolbox% 18 Jan 2018 Copied to EDtoolbox%% Uses the function EDcalcdistif nargin < 4	usedipoles = 0;else		if sum(any(dipolevec.').') == 0		usedipoles = 0;    else		if prod(any(dipolevec.').') == 0			error('ERROR: Some dipole vector = [0 0 0]')        else			usedipoles = 1;		end	endendif nargin < 3	velocity = 0;else	if sum(any(nvecpatch.').') == 0		velocity = 0;    else		if prod(double(any(nvecpatch.').')) == 0			error('ERROR: Some receiver normal vector = [0 0 0]')        else			velocity = 1;		end	endend[a,b] = size(coordpatch);npatch = max([a b]);if npatch == 3   npatch = min([a b]);end[a,b] = size(coordsou);nsou = max([a b]);if nsou == 3   nsou = min([a b]);endDistances = EDcalcdist(coordpatch,coordsou);Cosfi = ones(npatch,nsou);if velocity == 1 && usedipoles == 0	for ii = 1:npatch		coordsinglepatch = coordpatch(ii,:);		nvecsinglepatch = nvecpatch(ii,:);		xdiff = coordsinglepatch(ones(nsou,1),:) - coordsou;		Cosfi(ii,:) = sum( (xdiff.*nvecsinglepatch(ones(nsou,1),:)).' )./(Distances(ii,:) + eps);	endendif velocity == 0 && usedipoles == 1	for ii = 1:npatch		coordsinglepatch = coordpatch(ii,:);		xdiff = coordsinglepatch(ones(nsou,1),:) - coordsou;		Cosfi(ii,:) = sum( (xdiff.*dipolevec).' )./(Distances(ii,:) + eps);	endendif velocity == 1 && usedipoles == 1	for ii = 1:npatch		coordsinglepatch = coordpatch(ii,:);		nvecsinglepatch = nvecpatch(ii,:);		xdiff = coordsinglepatch(ones(nsou,1),:) - coordsou;		Cosfi(ii,:) = sum( (xdiff.*dipolevec).' )./(Distances(ii,:) + eps);		Cosfi(ii,:) = Cosfi(ii,:).*sum( (xdiff.*nvecsinglepatch(ones(nsou,1),:)).' )./(Distances(ii,:) + eps);	endend